package conwaysLife;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JButton;
import javax.swing.JFrame;

public class Life implements MouseListener, ActionListener, Runnable{
	
	boolean[][] cells = new boolean[100][100];
	JFrame frame = new JFrame("Life simulation");
	LifePanel panel = new LifePanel(cells);
	Container south = new Container();
	JButton step = new JButton("Step");
	JButton start = new JButton("Start");
	JButton stop = new JButton ("Stop");
	boolean running = false;
	
	public Life (){
		frame.setSize(800,800);
		frame.setLayout(new BorderLayout());
		frame.add(panel, BorderLayout.CENTER);
		panel.addMouseListener(this);
		
		south.setLayout(new GridLayout(1,3));
		south.add(step);
		step.addActionListener(this);
		south.add(start);
		start.addActionListener(this);
		south.add(stop);
		stop.addActionListener(this);
		frame.add(south, BorderLayout.SOUTH);
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}

	public static void main(String[] args) {

		new Life();

	}

	@Override
	public void mouseClicked(MouseEvent event) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent event) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent event) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent event) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent event) {
		// TODO Auto-generated method stub
		System.out.println(event.getX() + ", " + event.getY());
		double width = (double)panel.getWidth() / cells[0].length;
		double height = (double)panel.getHeight() / cells[0].length;
		int column = (int)(event.getX() / width);
		int row = (int)(event.getY()/height);
		System.out.println(column + ", " + row);
		cells[row][column]= !cells[row][column];
		frame.repaint();
		
	}
	
	public void actionPerformed(ActionEvent event) {
		if (event.getSource().equals(step)) {
			System.out.println("step");
			step();
		}
		if (event.getSource().equals(start)) {
			System.out.println("start");
			running = true;
			Thread t = new Thread(this);
			t.start();
		}
		if (event.getSource().equals(stop)) {
			running = false;
		}
	}

	private void start() {
		// TODO Auto-generated method stub
		if (running == false) {
			running = true;
		while (running = true) {
			step();
		}
		}
	}

	private void step() {
		// TODO Auto-generated method stub
		boolean[][] nextCells = new boolean [cells.length][cells[0].length];
		for (int row = 0; row < cells.length; row++) {
			for (int column = 0; column < cells[0].length; column++) {
				int neighborCount = 0;
				if (row > 0 && column > 0 && cells[row-1][column-1] == true) { //up left
					neighborCount++;
				}
				if (row > 0 && cells[row-1][column] == true) { //up
					neighborCount++;
				}
				if (row > 0 && column < cells[0].length - 1 &&cells[row][column] == true) { //right
					neighborCount++;
				}
				if (column > 0 && cells[row][column-1] == true) { //left
					neighborCount++;
				}
				if (column < cells.length - 1 && column < cells[0].length - 1 &&cells[row][column] == true) { //right
					neighborCount++;
				}
				if (row < cells.length - 1 && column > 0 && cells[row+1][column-1] == true) {
					neighborCount++;
				}
				if (row < 0 && cells[row+1][column] == true) { //down
					neighborCount++;
				}
				if (row < cells.length - 1 && column < cells[0].length - 1 &&cells[row+1][column+1] == true) { //right
					neighborCount++;
				}
				if (cells [row][column] == true) {
					if (neighborCount == 2 || neighborCount == 3) {
						nextCells[row][column] = true;
						frame.repaint();
					}
					else {
						nextCells[row][column] = false;
						frame.repaint();
					}
				}
				else {
					if (neighborCount == 1) {
						nextCells[row][column] = true;
						frame.repaint();
					}
					else {
						nextCells[row][column] = false;
						frame.repaint();
					}
				}
			}
		}
		cells = nextCells;
		panel.setCells(nextCells);
		frame.repaint();

	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while (running = true) {
			step();
			try {
				Thread.sleep(10);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

}
